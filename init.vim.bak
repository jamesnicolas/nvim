call plug#begin(stdpath('data') . '/plugged')
Plug 'hashivim/vim-terraform'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-fugitive'
Plug 'overcache/NeoSolarized'
Plug 'wellle/targets.vim'
Plug 'tpope/vim-rhubarb'
"Plug 'tpope/vim-surround'
Plug 'nvim-lualine/lualine.nvim'
Plug 'machakann/vim-sandwich'
 "Plug 'fatih/vim-go'
"Plug 'mg979/vim-visual-multi'
Plug 'vimwiki/vimwiki'
"Plug 'yegappan/grep'
"Plug 'tpope/vim-unimpaired'
 "Plug 'preservim/nerdtree'
"Plug 'vim-jp/vimdoc-ja'
" main one
Plug 'ms-jpq/coq_nvim', {'branch': 'coq'}
" 9000+ Snippets
Plug 'ms-jpq/coq.artifacts', {'branch': 'artifacts'}

" lua & third party sources -- See https://github.com/ms-jpq/coq.thirdparty
" Need to **configure separately**

Plug 'ms-jpq/coq.thirdparty', {'branch': '3p'}
" - shell repl
" - nvim lua api
" - scientific calculator
" - comment banner
" - etc
Plug 'neovim/nvim-lspconfig'
Plug 'williamboman/nvim-lsp-installer'
Plug 'rrethy/nvim-base16'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'b0o/mapx.nvim'
Plug 'johmsalas/text-case.nvim'

call plug#end()
filetype plugin indent on

syntax enable

syntax on

set nowrap

set hlsearch
set iskeyword+=-
set ignorecase
set smartcase
set termguicolors

set autoindent

set ruler
set number
set wildmenu
set showcmd

set shiftwidth=4
set softtabstop=4
set expandtab
set tabstop=4
set smarttab

set clipboard=unnamed
set guioptions-=e
set guioptions-=g
set guioptions-=m
set guioptions-=r
set guioptions-=T
set guioptions-=L

lua << END
require('lualine').setup({
    options = {theme = 'auto'}
})

END

command Evimrc execute 'edit' stdpath('config')

command! Gblame :Git blame

command Ycl :redir @*|echo expand('%:p') . ':' . line('.')|redir END

let g:neovide_cursor_animation_length=0.05
let g:neovide_cursor_trail_length=0.8

let g:neovide_refresh_rate=288

tnoremap <silent><C-h> <C-w>h
tnoremap <silent><C-j> <C-w>j
tnoremap <silent><C-k> <C-w>k
tnoremap <silent><C-l> <C-w>l
nnoremap <silent><C-h> <C-w>h
nnoremap <silent><C-j> <C-w>j
nnoremap <silent><C-k> <C-w>k
nnoremap <silent><C-l> <C-w>l


nnoremap <silent><C-u> <C-u>zz
nnoremap <silent><C-d> <C-d>zz

set mouse=a
let &t_ut=''
set background=light

lua << EOF
local nvim_lsp = require('lspconfig')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)
  buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)

end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local lsp_installer = require("nvim-lsp-installer")

-- Register a handler that will be called for all installed servers.
-- Alternatively, you may also register handlers on specific server instances instead (see example below).
lsp_installer.on_server_ready(function(server)
    local opts = {
        on_attach = on_attach
    }

    if server.name == "pylsp" then
        opts.settings = {
           pylsp = {
               configurationSources = {"flake8"}
            }
        }
    end

    -- (optional) Customize the options passed to the server
    -- if server.name == "tsserver" then
    --     opts.root_dir = function() ... end
    -- end

    -- This setup() function is exactly the same as lspconfig's setup function.
    -- Refer to https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md
    server:setup(opts)
end)

EOF


lua << EOF
EOF

lua << EOF

-- this is our single source of truth created above
local base16_theme_fname = vim.fn.expand(vim.env.HOME..'/.config/.base16_theme')
-- this function is the only way we should be setting our colorscheme
local function set_colorscheme(name)
    -- write our colorscheme back to our single source of truth
    vim.fn.writefile({name}, base16_theme_fname)
    -- set Neovim's colorscheme
    vim.cmd('colorscheme '..name)
    -- execute `kitty @ set-colors -c <color>` to change terminal window's
    -- colors and newly created terminal windows colors
    vim.loop.spawn('kitty', {
        args = {
            '@',
	    '--to',
	    vim.env.KITTY_LISTEN_ON,
            'set-colors',
            '-c',
            '-a',
            string.format(vim.env.HOME..'/base16-kitty/colors/%s.conf', name)
        }
    }, nil)
end

set_colorscheme(vim.fn.readfile(base16_theme_fname)[1])

mapx = require'mapx'


mapx.nnoremap('<leader>c', function()

    local actions = require "telescope.actions"
    local action_set = require('telescope.actions.set')
    local action_state = require('telescope.actions.state')
    -- get our base16 colorschemes
    local colors = vim.fn.getcompletion('base16', 'color')
    -- we're trying to mimic VSCode so we'll use dropdown theme
    local theme = require('telescope.themes').get_dropdown()
    -- create our picker
    require('telescope.pickers').new(theme, {
        prompt = 'Change Base16 Colorscheme',
        finder = require('telescope.finders').new_table {
            results = colors
        },
        sorter = require('telescope.config').values.generic_sorter(theme),
        attach_mappings = function(bufnr)
            -- change the colors upon selection
            actions.select_default:replace(function()
                set_colorscheme(action_state.get_selected_entry().value)
                actions.close(bufnr)
            end)
            action_set.shift_selection:enhance({
                -- change the colors upon scrolling
                post = function()
                    set_colorscheme(action_state.get_selected_entry().value)
                end
            })
            return true
        end
    }):find()
end)

EOF


" üêì Coq completion settings

" Set recommended to false
let g:coq_settings = { 'auto_start': v:true, "keymap.recommended": v:false, "keymap.jump_to_mark": v:null }

lua << EOF
EOF


" Keybindings
ino <silent><expr> <Esc>   pumvisible() ? "\<C-e><Esc>" : "\<Esc>"
ino <silent><expr> <C-c>   pumvisible() ? "\<C-e><C-c>" : "\<C-c>"
ino <silent><expr> <BS>    pumvisible() ? "\<C-e><BS>"  : "\<BS>"
ino <silent><expr> <CR>    pumvisible() ? (complete_info().selected == -1 ? "\<C-e><CR>" : "\<C-y>") : "\<CR>"
ino <silent><expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
ino <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<BS>"


autocmd FileType terraform setlocal shiftwidth=2 softtabstop=2 expandtab
